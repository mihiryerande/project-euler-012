# Problem 12:
#     Highly Divisible Triangular Number
#
# Description:
#     The sequence of triangle numbers is generated by adding the natural numbers.
#     So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#
#     The first ten terms would be:
#         1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#     Let us list the factors of the first seven triangle numbers:
#
#          1: 1
#          3: 1, 3
#          6: 1, 2, 3,  6
#         10: 1, 2, 5, 10
#         15: 1, 3, 5, 15
#         21: 1, 3, 7, 21
#         28: 1, 2, 4,  7, 14, 28
#
#     We can see that 28 is the first triangle number to have over five divisors.
#
#     What is the value of the first triangle number to have over five hundred divisors?

from math import floor, sqrt


def divisor_count(x):
    """
    Returns the number of divisors of `x`.

     Args:
         x (int): Natural number

    Returns:
        Number of divisors of `x`.

    Raises:
        AssertError: if incorrect params are given
    """
    root = sqrt(x)
    count = 0
    mid = floor(root)+1
    for y in range(1, mid):
        if x % y == 0:
            count += 2
    if root == int(root):
        # x is square, so don't double-count square root
        count -= 1
    return count


def main(d):
    """
    Returns a tuple (n, t_n, d_c), where `t_n` is the `n`th triangular number
      and `t_n` is the first triangular number having more than d divisors.
      d_c is the actual number of divisors of t_n, so d_c > d.

    Args:
        d (int): Natural number

    Returns:
        Tuple of (n, t_n, d_c)

    Raises:
        AssertError: if incorrect params are given
    """
    assert type(d) == int and d > 0

    n = 0
    t_n = 0
    d_c = 0
    while d_c <= d:
        n += 1
        t_n += n
        d_c = divisor_count(t_n)
    return n, t_n, d_c


if __name__ == '__main__':
    divisors = int(input('Enter a natural number: '))
    num, tri_num, divisor_count = main(divisors)
    print('First triangular number with over {} divisors:'.format(divisors))
    print('  n        = {}'.format(num))
    print('  t_n      = {}'.format(tri_num))
    print('  Divisors = {}'.format(divisor_count))
